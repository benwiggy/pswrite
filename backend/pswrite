#!/bin/bash
#
# by Ben Byram-Wigfield, based on the excellent work by 
# Kurt Pfeifle of Danka Deutschland GmbH, also
# Michael Goffioul, PT Withington, Richard Bronosky, Steve Palm and Helge Blischke
#
# This CUPS backend allows you to "print to file".
# A script is provided to install the components.
#
# In OS X System Preferences > Print & Fax, create a printer. Click on "Advanced"
# Specify "Type" as "Save PostScript"
# Set the URL to pswrite://path/to/folder/, eg: pswrite://Users/Shared/Print/In/
#
# Note that as of OS X 10.6, you can only save to /Users/Shared.
#
# Or on the Unix shell:
# lpadmin -p PostScript -v pswrite://Users/Shared/Print/ -E -P /path/to/PPD
# (you can leave aside the "-P" option to create a "raw" printqueue without filtering)

# test for 5 or 6 parameters
FILE=$6 || FILE="-";

LOG="${DEVICE_URI#pswrite:}/../pswrite.log"; export LOG ;
JOBID=$1 ;
USER=$2 ;
TITLE=$3 ;
COPIES=$4 ;
OPTIONS=$5 ;
PID=$$ ;
echo ${FILE} >> ${LOG} ;
echo ${JOBID} >> ${LOG} ;
echo ${USER} >> ${LOG} ;
echo ${TITLE} >> ${LOG} ;
echo ${COPIES} >> ${LOG} ;
echo ${OPTIONS} >> ${LOG} ;

chown $USER ${LOG};
chmod 744 ${LOG};

# if there are no arguments, print the message of the backend's capabilities.
if [ $# -eq 0 ]; then
echo "direct pswrite \"Unknown\" \"Save PostScript\""
exit 0
fi

# if the arguments are wrong, then print help
if [ $# -ne 5 -a $# -ne 6 ]; then
echo ""
echo "Usage: pswrite job-id user title copies options [file]"
echo " example for device-URI: 'pswrite://path/to/targetdir/'"
echo "(this writes the printfile to disk at specified path)"
echo ""
echo "Install a printqueue with 'lpadmin -p <printer-name> \
-v pswrite://path/to/targetdir/ -E [-P /path/to/PPD]"
echo ""
exit 1
fi

# Swap any colons and slashes or backslashes in the filename with underscore.
# (Spaces are allowed)
TITLE=$(echo "$TITLE" | tr : _ | tr / _ | tr "\134" _ );

# Remove any extraneous .suffixes. 
TITLE=$(expr "$TITLE" : '\(.*\)\.[^./]*$' \| "$TITLE" );

# Create the complete file path where the job is to be saved.
# This is taken from the device URI, so that you can use this backend 
# multiple times, for various "pswrite" printers to different folders.

# By default, use $TITLE as filename with .ps as suffix. 
# If there's an existing file with the same name, append the job number as a unique ID.

TARGETFILE="${DEVICE_URI#pswrite:}${TITLE}"".ps";
if [ -f "$TARGETFILE" ]; then
TARGETFILE="${DEVICE_URI#pswrite:}${TITLE}-${JOBID}"".ps"
fi

# OR, uncomment and modify the following line if you need the JOBTITLE, 
# USERNAME, JOBID, DATE as part of the filename:
# TARGETFILE="${DEVICE_URI#pswrite:}-${TITLE}-${JOBID}-${USER}"".ps";

# Check the print queue is working:
GREPSTRING="not accepting" ;
if lpstat -a $TARGETFILE | grep "$GREPSTRING" &> /dev/null ; then
echo "ERROR: printer ${DEVICE_URI#pswrite:} not accepting jobs."
exit 1
fi

# Now, output the PS and make the file owned by its user.
cat $FILE > "$TARGETFILE"
chown $USER "$TARGETFILE"
chmod 744 "$TARGETFILE"

# Uncomment the next line to make a PDF of the PS file using Apple's Preview
# pstopdf "$TARGETFILE"

# Uncomment the next line to make a PDF of the PS file using Adobe Distiller
# open -a 'Acrobat Distiller.app' "$TARGETFILE"

exit 0
